server_tokens off;

# Catch-all-unknown (needs to be the first vhost)
#
server {
  listen 3000;
  listen [::]:3000;
  server_name _; # This is just an invalid value which will never trigger on a real hostname.

  server_name_in_redirect off;
  deny all;
}

#
# This section deals with inbound traffic redirects to Kubernetes Backend
#
server {
  listen 3000;
  listen [::]:3000;
  server_name localhost;

  # this is the internal Docker DNS, cache only for 30s
  resolver 127.0.0.11 valid=30s;

  # Redirects all backend requests
  location ^~ /filestorage {
    proxy_http_version 1.1;
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-Host $host:$server_port;
    proxy_set_header X-Forwarded-Server $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    set $upstream http://filestorage:8080;
    proxy_pass $upstream;
    proxy_redirect ~^http://filestorage:8080/(.*) http://localhost:3000/$1;
  }

  location ^~ /persistence {
    proxy_http_version 1.1;
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-Host $host:$server_port;
    proxy_set_header X-Forwarded-Server $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    set $upstream http://persistence:8081;
    proxy_pass $upstream;
    proxy_redirect ~^http://persistence:8081/(.*) http://localhost:3000/$1;
  }

  location ^~ /auth {
    proxy_http_version 1.1;
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-Host $host:$server_port;
    proxy_set_header X-Forwarded-Server $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    set $upstream http://keycloak:8080;
    proxy_pass $upstream;
    proxy_redirect ~^http://keycloak:8080/(.*) http://localhost:3000/$1;
  }

  # Everything else redirects to the frontend
  location / {
    proxy_http_version 1.1;
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-Host $host:$server_port;
    proxy_set_header X-Forwarded-Server $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    set $upstream http://frontend:80;
    proxy_pass $upstream;
    proxy_redirect ~^http://frontend/(.*) http://localhost:3000/$1;
  }
}